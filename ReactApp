import { useState, useEffect } from "react";
import { Calendar, XAxis, YAxis, Line, LineChart } from "recharts";
import { Camera, Trash, Calendar as CalIcon } from "lucide-react";

const data = [
  { name: "2023-03-01", disposal: 0 },
  { name: "2023-03-02", disposal: 0 },
  { name: "2023-03-03", disposal: 0 },
  { name: "2023-03-04", disposal: 0 },
  { name: "2023-03-05", disposal: 0 },
  { name: "2023-03-06", disposal: 0 },
  { name: "2023-03-07", disposal: 0 },
];

const trashTypes = ["Organic", "Recyclable", "Hazardous"];
const days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];

const App = () => {
  const [selectedTrash, setSelectedTrash] = useState("");
  const [qrCode, setQrCode] = useState("");
  const [disposalDate, setDisposalDate] = useState("");
  const [upcomingDisposals, setUpcomingDisposals] = useState([]);
  const [notifications, setNotifications] = useState([]);
  const [calendarDate, setCalendarDate] = useState(new Date());

  useEffect(() => {
    const intervalId = setInterval(() => {
      const today = new Date();
      const hour = today.getHours();
      const day = today.getDay();
      if (hour === 9 && day >= 1 && day <= 5) {
        const disposals = data.filter((item) => item.name === today.toISOString().split("T")[0]);
        if (disposals.length > 0) {
          setNotifications(disposals.map((item, index) => Dispose of box ${index + 1} today!));
        }
      }
    }, 1000 * 60 * 60);
    return () => clearInterval(intervalId);
  }, []);

  const handleTrashSelect = (trash) => {
    setSelectedTrash(trash);
  };

  const handleQrCodeScan = (qrCode) => {
    setQrCode(qrCode);
  };

  const handleDisposalDateSelect = (date) => {
    setDisposalDate(date);
    const updatedData = [...data];
    const index = updatedData.findIndex((item) => item.name === date);
    if (index >= 0) {
      updatedData[index].disposal = 1;
    }
    setUpcomingDisposals(updatedData.filter((item) => item.disposal === 1));
  };

  const handleCalendarDateChange = (date) => {
    setCalendarDate(date);
  };

  const getDaysInMonth = (date) => {
    const month = date.getMonth();
    const year = date.getFullYear();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const days = [];
    for (let i = 1; i <= daysInMonth; i++) {
      days.push(i);
    }
    return days;
  };

  const getDayOfWeek = (date) => {
    const day = date.getDay();
    return days[day];
  };

  return (
    <div className="flex flex-col h-screen">
      <header className="bg-blue-500 text-white p-4">
        <h1 className="text-2xl font-bold">Lab Trash Disposal Calendar</h1>
      </header>
      <main className="flex-1 overflow-y-auto">
        <section className="p-4">
          <h2 className="text-xl font-bold">Calendar</h2>
          <div className="flex justify-center">
            <div className="w-full max-w-md">
              <div className="flex justify-between mb-2">
                <button
                  className="bg-blue-500 text-white p-2 rounded"
                  onClick={() => handleCalendarDateChange(new Date(calendarDate.getFullYear(), calendarDate.getMonth() - 1, 1))}
                >
                  Prev
                </button>
                <h3 className="text-lg font-bold">{calendarDate.toLocaleString("default", { month: "long", year: "numeric" })}</h3>
                <button
                  className="bg-blue-500 text-white p-2 rounded"
                  onClick={() => handleCalendarDateChange(new Date(calendarDate.getFullYear(), calendarDate.getMonth() + 1, 1))}
                >
                  Next
                </button>
              </div>
              <div className="grid grid-cols-7 gap-2">
                {days.map((day) => (
                  <div key={day} className="text-center">

> Oleg Kaminskyi:
{day}
                  </div>
                ))}
                {getDaysInMonth(calendarDate).map((day) => (
                  <div key={day} className="text-center">
                    {day}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </section>
        <section className="p-4">
          <h2 className="text-xl font-bold">Select Trash Type</h2>
          <ul className="flex flex-wrap justify-center">
            {trashTypes.map((trash) => (
              <li key={trash} className="m-2">
                <button
                  className={bg-blue-500 text-white p-2 rounded ${selectedTrash === trash ? "bg-blue-700" : ""}}
                  onClick={() => handleTrashSelect(trash)}
                >
                  {trash}
                </button>
              </li>
            ))}
          </ul>
        </section>
        <section className="p-4">
          <h2 className="text-xl font-bold">Scan QR Code</h2>
          <div className="flex justify-center">
            <Camera size={48} color="blue" />
            <input
              type="text"
              value={qrCode}
              onChange={(e) => handleQrCodeScan(e.target.value)}
              placeholder="Scan QR code"
              className="ml-2 p-2 border border-gray-400 rounded"
            />
          </div>
        </section>
        <section className="p-4">
          <h2 className="text-xl font-bold">Select Disposal Date</h2>
          <div className="flex justify-center">
            <CalIcon size={48} color="blue" />
            <input
              type="date"
              value={disposalDate}
              onChange={(e) => handleDisposalDateSelect(e.target.value)}
              className="ml-2 p-2 border border-gray-400 rounded"
            />
          </div>
        </section>
        <section className="p-4">
          <h2 className="text-xl font-bold">Upcoming Disposals</h2>
          <ul>
            {upcomingDisposals.map((item) => (
              <li key={item.name}>{item.name}</li>
            ))}
          </ul>
        </section>
      </main>
    </div>
  );
};

export default App;
